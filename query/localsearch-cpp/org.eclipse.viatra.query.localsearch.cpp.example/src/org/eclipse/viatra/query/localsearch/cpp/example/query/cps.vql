/*******************************************************************************
 * Copyright (c) 2014-2016 Robert Doczi, IncQuery Labs Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Robert Doczi - initial API and implementation
 *******************************************************************************/
package org.eclipse.viatra.query.localsearch.cpp.example.query

import "http://org.eclipse.viatra/model/cps"

pattern applicationInstances(appInstance) {
	ApplicationInstance(appInstance);
}

pattern hostInstances(hostInstance) {
	HostInstance(hostInstance);
}

@Bind(parameters={appType})
pattern appInstanceType(appInstance, appType) {
	ApplicationType.instances(appType, appInstance);
}

@Bind(parameters={appInstance})
@Bind(parameters={name})
pattern applicationName(appInstance, name) {
	ApplicationInstance.identifier(appInstance, name);
}

@Bind(parameters={appInstance, requirement})
pattern applicationRequirements(appInstance, requirement) {
	find appInstanceType(appInstance, appType);
	ApplicationType.requirements(appType, requirement);
}

@Bind(parameters={appType})
@Bind(parameters={hostType})
@Bind(parameters={appType, hostType})
pattern communicatingTypes(appType, hostType) {
	ApplicationType.instances.allocatedTo(appType, hostInstance);
	HostType.instances(hostType, hostInstance);
}

// has either an instance or a requirement
pattern usefulApplicationTypes(appType) {
	ApplicationType.instances(appType, _);
} or {
	ApplicationType.requirements(appType, _);
}

pattern uselessApplicationTypes(appType) {
	ApplicationType(appType);
	neg find usefulApplicationTypes(appType);
}